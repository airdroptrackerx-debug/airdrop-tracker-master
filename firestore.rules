rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read: if isOwner(userId) || 
                     (isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow write: if isOwner(userId);
      
      // User's tasks subcollection
      match /tasks/{taskId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Tasks collection - users can access their own tasks, admins can read all
    match /tasks/{taskId} {
      allow read: if (isAuthenticated() && request.auth.uid == resource.data.userId) ||
                     (isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow write: if isAuthenticated() && 
                      request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.userId;
    }
    
    // Donation confirmations - allow anyone to create (for both authenticated and anonymous donations)
    match /donationConfirmations/{confirmationId} {
      allow create: if true; // Anyone can create a donation confirmation
      allow read: if isAuthenticated(); // Only authenticated users can read
      allow update, delete: if false; // No updates or deletes allowed
    }
    
    // Airdrop projects - public read, admin write
    match /airdropProjects/{projectId} {
      allow read: if true; // Anyone can view airdrops
      allow create, update, delete: if isAuthenticated() && 
                                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow update: if isAuthenticated() && // Allow incrementing views/clicks
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'clicks']);
    }
    
    // Global notifications - public read, admin write
    match /globalNotifications/{notificationId} {
      allow read: if true; // Anyone can read global notifications
      allow create: if isAuthenticated() && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow delete: if isAuthenticated() && 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // User activity tracking - allow public read for live count (social proof on signup)
    match /userActivity/{userId} {
      allow read: if true; // Public read for counting active users (social proof)
      allow write: if isAuthenticated() && 
                     request.auth.uid == userId &&
                     // Validate data structure
                     request.resource.data.keys().hasAll(['userId', 'lastSeen']) &&
                     request.resource.data.userId == request.auth.uid;
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
